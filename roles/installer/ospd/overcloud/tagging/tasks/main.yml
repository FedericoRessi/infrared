- name: create the baremetal flavor for our machines
  shell: "source ~/stackrc; openstack flavor create --id auto --ram 4096 --disk 16 --vcpus 1 baremetal"
  register: result
  ignore_errors: yes
  failed_when: "result.rc != 0 and result.stderr.find('Flavor with name baremetal already exists') != -1"

- name: set additional properties
  shell: "source ~/stackrc; openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' baremetal"

  # TODO: change flavor creation to be based on ansible facts
- name: create the flavors for our machines
  shell: "source ~/stackrc; openstack flavor create --id auto --ram {{ item.value.memory | int - 100 }} --disk {{ item.value.disks.disk1.size | regex_replace('(?P<num>[0-9]+).*$', '\\g<num>') | int - 10 }} --vcpus {{ item.value.cpu | int - 1 }} {{ item.key }}-{{ item.key | to_uuid }}"
  register: flavor_result
  when: "'{{ item.key }}' != 'undercloud'"
  failed_when: "result.rc != 0 and result.stderr.find('Flavor with name {{ item.key }} already exists') != -1"
  with_dict: provisioner.topology.nodes

  # TODO: change flavor creation to be based on ansible facts
- set_fact:
      tagged_flavors: "{{ flavor_result.results }}"

  # TODO: change flavor creation to be based on ansible facts
- name: set additional properties
  shell: "source ~/stackrc; openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property 'capabilities:profile'='{{ item.cmd.split() | last }}' {{ item.cmd.split() | last }}"
  when: item.cmd is defined
  with_items: tagged_flavors

  # TODO: node tagging to be based on ansible facts
- name: get the node UUID
  shell: "source ~/stackrc; ironic node-list | grep {{ item }} | awk '{print $2}'"
  when: "'{{ item.rstrip('1234567890') }}' != 'undercloud'"
  with_items: groups['openstack_nodes']
  register: node_list

  # TODO: node tagging to be based on ansible facts
- name: tag our nodes with the proper profile
  shell: "source ~/stackrc; ironic node-update {{ item[0].stdout }} add properties/capabilities='profile:{{ item[1].cmd.split() | last }},boot_option:local'"
  when: "item[0].item is defined and item[1].cmd is defined and item[0].item.rstrip('1234567890') in item[1].cmd"
  with_nested:
      - node_list.results
      - tagged_flavors
