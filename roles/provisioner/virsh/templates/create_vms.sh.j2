#!/bin/bash
{% set glob={ 'build': true } %}
{% for node_name, node_values in provisioner.topology.nodes.iteritems() %}
# *************************************************************
{% for disk_name, disk_values in node_values.disks.iteritems() %}
{% if disk_values.get('import_url', None) %}
{# *********** #}
{# *********** Start import for the image if image url is defined  #}
{# *********** #}
# import {{ disk_name }} for {{ node_name }}
wget -q -t 5 {{ disk_values['import_url'] }} -O /var/lib/libvirt/images/{{node_name}}_original_{{disk_name}}.qcow2

# copy images for the defined amount of vm's
{% for num in range(1, node_values.amount + 1, 1) %}
# TODO consider cleaning image to avoid MAC address duplication
cp /var/lib/libvirt/images/{{node_name}}_original_{{disk_name}}.qcow2 /var/lib/libvirt/images/{{node_name}}{% if node_values.amount > 1 %}{{ num }}{% endif %}_imported_{{disk_name}}.qcow2
{% endfor %}
{% else %}
{# *********** #}
{# *********** image url is not defined: download base image and build disk  #}
{# *********** #}
{% if glob['build'] %}
# start building base disk (one time operation)
rm -f /var/lib/libvirt/images/base_image.qcow2
wget -q {{ provisioner.image.server }}/{{ guest_image }} -O /var/lib/libvirt/images/base_image.qcow2

# reset the password to a default one and inject our SSH key
virt-customize -a /var/lib/libvirt/images/base_image.qcow2 --root-password password:redhat --ssh-inject root:file:/root/.ssh/id_rsa.pub --selinux-relabel

# removing cloud-init
virt-customize -a /var/lib/libvirt/images/base_image.qcow2 --run-command 'yum remove cloud-init* -y'

# TODO: configure interfaces based on config rather than hardcode
# configure three network interfaces for the image
virt-customize -a /var/lib/libvirt/images/base_image.qcow2 --run-command 'cp /etc/sysconfig/network-scripts/ifcfg-eth{0,1} && sed -i s/DEVICE=.*/DEVICE=eth1/g /etc/sysconfig/network-scripts/ifcfg-eth1'

# TODO: configure interfaces based on config rather than hardcode
# configure three network interfaces for the image
virt-customize -a /var/lib/libvirt/images/base_image.qcow2 --run-command 'cp /etc/sysconfig/network-scripts/ifcfg-eth{1,2} && sed -i s/DEVICE=.*/DEVICE=eth2/g /etc/sysconfig/network-scripts/ifcfg-eth2'
{% set _ = glob.update({'build':False}) %}
# *************************************************************
{% endif %}
{# *********** #}
{# *********** Build all the disks  #}
{# *********** #}
{% for num in range(1, node_values.amount + 1, 1) %}
# create {{ disk_name }} for {{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}

qemu-img create -f qcow2 {{ disk_values.path }}/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}.{{ disk_name }}.qcow2 {{ disk_values.size }}
virt-resize --expand /dev/sda1 /var/lib/libvirt/images/base_image.qcow2 {{ disk_values.path }}/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}.{{disk_name}}.qcow2
{% endfor %}

{% endif %}
{% endfor %}
{% endfor %}


# create VM's
{% for node_name, node_values in provisioner.topology.nodes.iteritems() %}
{% for num in range(1, node_values.amount + 1, 1) %}
virt-install --name {{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %} \
{% for disk_name, disk_values in node_values.disks.iteritems() %}
{% if disk_values.get('import_url', None) %}
     --disk path=/var/lib/libvirt/images/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}_imported_{{disk_name}}.qcow2,device=disk,bus=virtio,format=qcow2 \
{% else %}
     --disk path={{ disk_values.path }}/{{ node_name }}{% if node_values.amount > 1 %}{{ num }}{% endif %}.{{ disk_name }}.qcow2,device=disk,bus=virtio,format=qcow2 \
{% endif %}
{% endfor %}
     --network network:data \
     --network network:management \
     --network network:external \
     --virt-type kvm \
     --cpu host-model \
     --ram {{ node_values.memory }} \
     --vcpus {{ node_values.cpu }} \
     --os-variant {{ node_values.os.variant }} \
     --import \
     --noautoconsole \
     --autostart \
     --vnc
{% endfor %}
{% endfor %}
