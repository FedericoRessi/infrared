# In case of virthost we need to fix the pxe_ssh limitation of correctly assigning the MAC address to the iPXE script
- name: Copy the guest image to the undercloud
  hosts: virthost
  gather_facts: no
  tasks:
      - name: get the guest image name
        shell: "ls /var/lib/libvirt/images/rhel-guest-image*-original"
        register: image_name

      - name: copy the guest image to the undercloud
        shell: "scp -o StrictHostKeyChecking=no {{ image_name.stdout_lines | last }} {{ hostvars['undercloud'].ansible_default_ipv4.address }}:/home/{{ installer.user.name }}/guest_image.qcow2"

      - name: chmod to stack user
        delegate_to: undercloud
        shell: "chown {{ installer.user.name }}:{{ installer.user.name }} /home/{{ installer.user.name }}/guest_image.qcow2"

- name: Fixing the pxe_ssh and iPXE
  hosts: undercloud
  gather_facts: no
  tasks:
      - name: copy our undercloud public key
        fetch:
            src: "/home/{{ installer.user.name }}/.ssh/id_rsa.pub"
            dest: "{{ inventory_dir }}/id_rsa_undercloud.pub"
            flat: yes
        become: yes
        become_user: "{{ installer.user.name }}"

      - name: debug hostvars
        debug:
            var: "{{ hostvars[inventory_hostname] }}"

      - name: prepare instack.json
        template:
            src: "templates/virthost_instack.json.j2"
            dest: "~/instack_template.json"
        become: yes
        become_user: "{{ installer.user.name }}"

      - name: populate the private key
        shell: "cat ~/instack_template.json | jq --arg key \"$(cat ~/.ssh/id_rsa)\" '. | .nodes[].pm_password=$key | .[\"ssh-key\"]=$key'> instackenv.json"
        become: yes
        become_user: "{{ installer.user.name }}"

      - name: copy bootif script on the undercloud
        copy:
            src: "scripts/bootif-fix.sh"
            dest: "/usr/bin/bootif-fix"
            mode: 0755

      - name: copy the service file
        copy:
            src: "scripts/bootif-fix.service"
            dest: "/usr/lib/systemd/system/bootif-fix.service"

      - name: reload the service daemon
        shell: "systemctl daemon-reload"

      - name: enable and run bootif-fix service
        service:
            name: "bootif-fix"
            enabled: yes
            state: started

# In case we're dealing with virthost, we need to make sure the undercloud is able to ssh to the hypervisor
- name: Create the stack user on the virthost and allow SSH to hypervisor
  hosts: virthost
  gather_facts: no
  tasks:
      - name: create stack user on virthost
        user:
            name: "{{ installer.user.name }}"
            state: present
            password: "{{ installer.user.password | password_hash('sha512') }}"

      - name: set permissions for the user to access the hypervisor
        copy:
            content: |
                [libvirt Management Access]
                Identity=unix-user:{{ installer.user.name }}
                Action=org.libvirt.unix.manage
                ResultAny=yes
                ResultInactive=yes
                ResultActive=yes
            dest: "/etc/polkit-1/localauthority/50-local.d/50-libvirt-user-{{ installer.user.name }}.pkla"

      - name: print the public key
        shell: "cat {{ inventory_dir }}/id_rsa_undercloud.pub"
        register: undercloud_public_key
        delegate_to: localhost

      - name: insert the public key to the known hosts in virthost
        lineinfile:
            dest: "/home/{{ installer.user.name }}/.ssh/authorized_keys"
            line: "{{ undercloud_public_key.stdout }}"
        become: yes
        become_user: "{{ installer.user.name }}"
